# -*- coding: utf-8 -*-
"""videoanalyser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LC_Wn5R_2mPCvP7hYLmFZILunWKYOjhk

Video comments sentiments analyzer

new last attempt
"""

!pip install flask transformers google-api-python-client matplotlib pyngrok

# Import necessary libraries
from flask import Flask, request, render_template_string
from googleapiclient.discovery import build
from transformers import pipeline
import matplotlib.pyplot as plt
import os
from pyngrok import ngrok

# Initialize Flask app
app = Flask(__name__)

# Initialize the sentiment-analysis pipeline
sentiment_analyzer = pipeline("sentiment-analysis")

# Function to get YouTube comments
def get_comments(video_id, api_key):
    youtube = build('youtube', 'v3', developerKey=api_key)
    comments = []
    response = youtube.commentThreads().list(
        part="snippet",
        videoId=video_id,
        textFormat="plainText",
        maxResults=100
    ).execute()

    while response:
        for item in response['items']:
            comment = item['snippet']['topLevelComment']['snippet']['textDisplay']
            comments.append(comment)

        if 'nextPageToken' in response:
            response = youtube.commentThreads().list(
                part="snippet",
                videoId=video_id,
                pageToken=response['nextPageToken'],
                maxResults=100
            ).execute()
        else:
            break

    return comments

# Function to analyze sentiment of comments
def get_sentiments(comments):
    sentiment_counts = {'positive': 0, 'negative': 0, 'neutral': 0}

    for comment in comments:
        try:
            sentiments = sentiment_analyzer(comment)
            sentiment = sentiments[0] if isinstance(sentiments, list) and sentiments else None
        except Exception as e:
            print(f"Error in sentiment analysis: {e}")
            sentiment = None

        if sentiment and sentiment['label'] == 'POSITIVE' and sentiment['score'] > 0.9:
            sentiment_counts['positive'] += 1
        elif sentiment and sentiment['label'] == 'NEGATIVE' and sentiment['score'] > 0.9:
            sentiment_counts['negative'] += 1
        else:
            sentiment_counts['neutral'] += 1

    return sentiment_counts

# Function to plot the sentiment distribution
def plot_sentiment_distribution(sentiment_counts):
    labels = sentiment_counts.keys()
    sizes = sentiment_counts.values()
    colors = ['gold', 'lightcoral', 'lightskyblue']
    explode = (0.1, 0, 0)  # explode 1st slice

    plt.pie(sizes, explode=explode, labels=labels, colors=colors,
            autopct='%1.1f%%', shadow=True, startangle=140)

    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    plt.savefig('static/sentiment_pie_chart.png')  # Save the plot as an image
    plt.close()

# HTML templates as strings
index_html = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YouTube Sentiment Analysis</title>
    <style>
        /* Import JetBrains Mono font from Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap');

        body {
            font-family: 'JetBrains Mono', monospace;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: rgb(238,174,202);
            background: radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);
            position: relative;
            overflow: hidden;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
        }

        label {
            font-size: 1.2rem;
            font-style: italic;
            color: #444;
        }

        input[type="text"] {
            font-family: 'JetBrains Mono', monospace;
            font-size: 1rem;
            padding: 10px;
            border: 2px solid #555;
            border-radius: 5px;
            width: 300px;
            outline: none;
            transition: border-color 0.3s ease;
        }

        input[type="text"]:focus {
            border-color: #007BFF;
        }

        button {
            font-family: 'JetBrains Mono', monospace;
            font-size: 1rem;
            font-weight: bold;
            padding: 10px 20px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #0056b3;
        }

        button:active {
            background-color: #004080;
        }

        /* Random SVG Designs */
        .random-svg {
            position: absolute;
            z-index: 1;
            opacity: 0.3;
            font-size: 4rem;
            color: #555;
            animation: float 6s infinite ease-in-out;
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0) rotate(0deg) scale(1);
            }
            25% {
                transform: translateY(-30px) rotate(-15deg) scale(1.1);
            }
            50% {
                transform: translateY(20px) rotate(15deg) scale(0.9);
            }
            75% {
                transform: translateY(-20px) rotate(-10deg) scale(1.05);
            }
        }

        /* Birds Animation */
        .bird {
            position: absolute;
            font-size: 3rem;
            color: #555;
            opacity: 0.4;
            animation: fly 8s linear infinite;
        }

        @keyframes fly {
            0% {
                transform: translateX(-100%) translateY(0) rotate(0deg);
            }
            100% {
                transform: translateX(100vw) translateY(-50px) rotate(360deg);
            }
        }

        /* Clouds Animation */
        .cloud {
            position: absolute;
            font-size: 5rem;
            color: #fff;
            opacity: 0.2;
            animation: drift 10s linear infinite;
        }

        @keyframes drift {
            0% {
                transform: translateX(-100%);
            }
            100% {
                transform: translateX(100vw);
            }
        }

        /* Stars Animation */
        .star {
            position: absolute;
            font-size: 2rem;
            color: #fff;
            opacity: 0.3;
            animation: twinkle 3s infinite ease-in-out;
        }

        @keyframes twinkle {
            0%, 100% {
                opacity: 0.3;
                transform: scale(1);
            }
            50% {
                opacity: 0.8;
                transform: scale(1.2);
            }
        }

        /* Hearts Animation */
        .heart {
            position: absolute;
            font-size: 2rem;
            color: #ff6b6b;
            opacity: 0.4;
            animation: float 5s infinite ease-in-out;
        }

        /* Snail Animation */
        .snail {
            position: absolute;
            bottom: -50px;
            left: -50px;
            font-size: 5rem;
            animation: crawl 12s linear infinite;
            z-index: 1;
        }

        @keyframes crawl {
            0% {
                transform: translateX(-100%) rotate(0deg);
            }
            100% {
                transform: translateX(100vw) rotate(360deg);
            }
        }
    </style>
</head>
<body>
    <!-- Random SVG Elements -->
    <div class="random-svg" style="top: 10%; left: 5%; font-size: 5rem; transform: rotate(-15deg);">#</div>
    <div class="random-svg" style="top: 20%; right: 10%; font-size: 4.5rem; transform: rotate(25deg);">{}</div>
    <div class="random-svg" style="top: 40%; left: 15%; font-size: 4rem; transform: rotate(-10deg);">*</div>
    <div class="random-svg" style="bottom: 20%; right: 5%; font-size: 5.5rem; transform: rotate(15deg);">~</div>
    <div class="random-svg" style="bottom: 10%; left: 20%; font-size: 4rem; transform: rotate(-20deg);">/</div>
    <div class="random-svg" style="top: 5%; right: 20%; font-size: 4.2rem; transform: rotate(30deg);">@</div>

    <!-- Birds -->
    <div class="bird" style="top: 15%; left: 10%;">üê¶</div>
    <div class="bird" style="top: 25%; right: 15%;">ü¶Ö</div>

    <!-- Clouds -->
    <div class="cloud" style="top: 5%; left: 20%;">‚òÅÔ∏è</div>
    <div class="cloud" style="top: 15%; right: 5%;">‚òÅÔ∏è</div>

    <!-- Stars -->
    <div class="star" style="top: 30%; left: 30%;">‚≠ê</div>
    <div class="star" style="top: 40%; right: 40%;">üåü</div>

    <!-- Hearts -->
    <div class="heart" style="top: 50%; left: 10%;">‚ù§Ô∏è</div>
    <div class="heart" style="top: 60%; right: 20%;">üíñ</div>

    <!-- Moving Snail -->
    <div class="snail">üêå</div>

    <!-- Centered Content -->
    <div class="container">
        <h1>YouTube Comment Sentiment Analysis</h1>
        <form method="POST">
            <label for="video_id"><strong>Enter YouTube Video ID:</strong></label>
            <input type="text" id="video_id" name="video_id" required placeholder="e.g., dQw4w9WgXcQ">
            <button type="submit">Analyze</button>
        </form>
    </div>
</body>
</html>

"""

result_html = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sentiment Analysis Results</title>
    <style>
        /* Import JetBrains Mono font from Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap');

        body {
            font-family: 'JetBrains Mono', monospace;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: rgb(238,174,202);
            background: radial-gradient(circle, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);
            position: relative;
            overflow: hidden;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

        p {
            font-size: 1.2rem;
            color: #444;
            margin: 5px 0;
        }

        img {
            max-width: 100%;
            height: auto;
            margin-top: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        a {
            font-size: 1rem;
            color: #007BFF;
            text-decoration: none;
            margin-top: 20px;
            transition: color 0.3s ease;
        }

        a:hover {
            color: #0056b3;
        }

        /* Math-related Moving Objects */
        .math-object {
            position: absolute;
            z-index: 1;
            opacity: 0.3;
            font-size: 3rem;
            color: #555;
            animation: float 6s infinite ease-in-out;
        }

        @keyframes float {
            0%, 100% {
                transform: translateY(0) rotate(0deg) scale(1);
            }
            25% {
                transform: translateY(-30px) rotate(-15deg) scale(1.1);
            }
            50% {
                transform: translateY(20px) rotate(15deg) scale(0.9);
            }
            75% {
                transform: translateY(-20px) rotate(-10deg) scale(1.05);
            }
        }

        /* Graphs and Charts */
        .graph {
            position: absolute;
            font-size: 4rem;
            color: #555;
            opacity: 0.4;
            animation: drift 10s linear infinite;
        }

        @keyframes drift {
            0% {
                transform: translateX(-100%);
            }
            100% {
                transform: translateX(100vw);
            }
        }

        /* Loading Bar */
        .loading-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: #007BFF;
            z-index: 9999;
            transform: scaleX(0);
            transform-origin: left;
            animation: loading 2s ease-in-out;
        }

        @keyframes loading {
            0% {
                transform: scaleX(0);
            }
            50% {
                transform: scaleX(1);
            }
            100% {
                transform: scaleX(0);
            }
        }

        /* Hide content until loaded */
        .content {
            display: none;
        }

        .loaded .content {
            display: block;
        }

        .loaded .loading-bar {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Loading Bar -->
    <div class="loading-bar"></div>

    <!-- Math-related Moving Objects -->
    <div class="math-object" style="top: 10%; left: 5%; font-size: 4rem; transform: rotate(-15deg);">+</div>
    <div class="math-object" style="top: 20%; right: 10%; font-size: 4rem; transform: rotate(25deg);">-</div>
    <div class="math-object" style="top: 40%; left: 15%; font-size: 4rem; transform: rotate(-10deg);">√ó</div>
    <div class="math-object" style="bottom: 20%; right: 5%; font-size: 4rem; transform: rotate(15deg);">√∑</div>
    <div class="math-object" style="bottom: 10%; left: 20%; font-size: 4rem; transform: rotate(-20deg);">()</div>
    <div class="math-object" style="top: 5%; right: 20%; font-size: 4rem; transform: rotate(30deg);">[]</div>

    <!-- Graphs and Charts -->
    <div class="graph" style="top: 15%; left: 10%;">üìà</div>
    <div class="graph" style="top: 25%; right: 15%;">üìâ</div>

    <!-- Centered Content -->
    <div class="container content">
        <h1>Sentiment Analysis Results</h1>
        <p>Positive: {{ sentiment_counts['positive'] }}</p>
        <p>Negative: {{ sentiment_counts['negative'] }}</p>
        <p>Neutral: {{ sentiment_counts['neutral'] }}</p>
        <img src="{{ url_for('static', filename='sentiment_pie_chart.png') }}" alt="Sentiment Distribution">
        <br>
        <a href="/">Back to Home</a>
    </div>

    <script>
        // Simulate page load for demonstration
        setTimeout(() => {
            document.body.classList.add('loaded');
        }, 2000); // Adjust this timeout to match your actual page load time
    </script>
</body>
</html>
"""

# Home route to display the input form
@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        video_id = request.form['video_id']
        api_key = 'AIzaSyAoLY97cBfQV8cXquNjeBiJr2bU2mTaMZ0'  # Replace with your YouTube API key

        # Fetch comments
        comments = get_comments(video_id, api_key)

        # Analyze sentiment
        sentiment_counts = get_sentiments(comments)

        # Plot sentiment distribution
        plot_sentiment_distribution(sentiment_counts)

        # Render the result template with sentiment counts
        return render_template_string(result_html, sentiment_counts=sentiment_counts)

    # Render the input form template
    return render_template_string(index_html)

# Run the Flask app with ngrok
if __name__ == '__main__':
    # Create static folder if it doesn't exist
    if not os.path.exists('static'):
        os.makedirs('static')

    # Authenticate ngrok
    ngrok.set_auth_token("2t6AnCLmvOadQKuA0jK0tb6hF3T_2FP1wKyHZxpsoUcfXvudw")  # Replace with your ngrok authtoken

    # Start ngrok tunnel
    public_url = ngrok.connect(5000)
    print("Public URL:", public_url)

    # Run the Flask app
    app.run(host='0.0.0.0', port=5000)